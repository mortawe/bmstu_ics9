#include <iostream>
#include "vector"

using namespace std;

const int a = 1, b = 2, c = 3, d = 4, f = 5;
const char letters[] = {0, 'a', 'b', 'c', 'd', 'e', 'f'};
vector<vector<int>> table = {
        {0, a, b, c, d},
        {a, a, b, c, d},
        {b, b, a, d, c},
        {c, c, d, a, b},
        {d, d, c, b, a}
};
vector<vector<int>> table2 = {
        {0, a, b, c, d, f},
        {a, a, a, a, d, d},
        {b, a, b, c, d, d},
        {c, d, d, d, a, a},
        {d, d, d, d, a, a},
        {f, d, f, f, a, a}
};

bool isAssociative(vector<vector<int>> table) {
    int n = table.size();
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < n; k++) {
                int left = table[table[i][j]][k],
                        right = table[i][table[j][k]];
                if (left != right) {
                    return false;
                }
            }
        }
    }
    return true;
}

vector<int> runEveryElem(vector<vector<int>> table, int current, vector<int> passed, int step) {
    if (step >= table.size()) {
        return passed;
    }
    for (int j = 0; j < passed.size(); j++) {
        if (find(passed.begin(), passed.end(), table[current][j]) == passed.end()) {
            passed.push_back(table[current][j]);
            passed = runEveryElem(table, table[current][j], passed, step + 1);
        }
        if (find(passed.begin(), passed.end(), table[j][current]) == passed.end()) {
            passed.push_back(table[j][current]);
            passed = runEveryElem(table, table[current][j], passed, step + 1);
        }
    }
    current = table[current][current];
    if (find(passed.begin(), passed.end(), current) == passed.end()) {
        passed.push_back(current);
        passed = runEveryElem(table, current, passed, step + 1);
    }
    return passed;
}

vector<int> genNumsToN(int n) {
    vector<int> v;
    for (int i = 1; i <= n; i++) {
        v.push_back(i);
    }
    return v;
}

vector<int> findSystem(vector<vector<int>> table) {
    vector<int> perm = genNumsToN(table.size());
    for (int size = 1; size < table.size(); size++) {
        do {
            vector<int> system;
            vector<int> letters;
            for (int i = 0; i < size; i++) {
                for (int j = 0; j < table[perm[i] - 1].size(); j++) {
                    if (find(letters.begin(), letters.end(), table[perm[i] - 1][j]) == letters.end()) {
                        letters.push_back(table[perm[i] - 1][j]);
                    }
                }
                system.push_back(perm[i]);
            }
            if (letters.size() >= table.size()) {
                return system;
            }
        } while (std::next_permutation(perm.begin(), perm.end()));
    }

    return vector<int>{};
}

vector<int> findGenerators(vector<vector<int>> table) {
    vector<vector<int>> sets;
    for (int i = 1; i < table.size(); i++) {
        vector<int> letters = runEveryElem(table, i, vector<int>{i}, 1);
//        cout << "generated by " << i << " : ";
//        for (int j = 0; j < letters.size(); j++) {
//            cout << letters[j] << " ";
//        }
//        cout << "\n";
        sets.push_back(letters);
    }
    return findSystem(sets);
}

vector<int> findLeft1(vector<vector<int>> table){
    vector<int> eds;
    for (int i = 1; i < table.size(); i++) {
        bool is1 = true;
        for (int j = 1; j < table.size(); j++) {
            if (table[i][j] != j) {
                is1 = false;
                break;
            }
        }
        if (is1) {
            eds.push_back(i);
        }
    }
    return eds;
}

vector<int> findRight1(vector<vector<int>> table){
    vector<int> eds;
    for (int i = 1; i < table.size(); i++) {
        bool is1 = true;
        for (int j = 1; j < table.size(); j++) {
            if (table[j][i] != j) {
                is1 = false;
                break;
            }
        }
        if (is1) {
            eds.push_back(i);
        }
    }
    return eds;
}

int main() {
    cout << "Is Associative : " << isAssociative(table2) << "\n";
    vector<int> system = findGenerators(table2);

    cout << "\nGenerators : ";

    for (int i = 0; i < system.size(); i++) {
        cout << letters[system[i]] << " ";
    }
    cout << "\nLeft 1 : ";
    auto left = findLeft1(table2), right = findRight1(table2);
    for (int i = 0; i < left.size(); i++) {
        cout << letters[left[i]] << " ";
    }
    cout << "\nRight 1 : ";

    for (int i = 0; i < right.size(); i++) {
        cout << letters[right[i]] << " ";
    }
    return 0;
}
